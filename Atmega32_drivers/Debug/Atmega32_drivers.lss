
Atmega32_drivers.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000076c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000007e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800060  00800060  000007e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000810  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000150  00000000  00000000  0000084c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000101f  00000000  00000000  0000099c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000098d  00000000  00000000  000019bb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000089d  00000000  00000000  00002348  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000228  00000000  00000000  00002be8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000543  00000000  00000000  00002e10  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000006c8  00000000  00000000  00003353  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000e0  00000000  00000000  00003a1b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a1 36       	cpi	r26, 0x61	; 97
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 9d 00 	call	0x13a	; 0x13a <main>
  74:	0c 94 b4 03 	jmp	0x768	; 0x768 <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <App_init>:
#include "App.h"

uint8_t num = 0;

void App_init()
{	
  7c:	0f 93       	push	r16
	Seven_SEG_init(PORTC, 0, 1, 2, 3);
  7e:	03 e0       	ldi	r16, 0x03	; 3
  80:	22 e0       	ldi	r18, 0x02	; 2
  82:	41 e0       	ldi	r20, 0x01	; 1
  84:	60 e0       	ldi	r22, 0x00	; 0
  86:	82 e0       	ldi	r24, 0x02	; 2
  88:	0e 94 73 00 	call	0xe6	; 0xe6 <Seven_SEG_init>
	BUTTON_init(PORTD, 0);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	83 e0       	ldi	r24, 0x03	; 3
  90:	0e 94 99 00 	call	0x132	; 0x132 <BUTTON_init>
	BUTTON_init(PORTD, 1);
  94:	61 e0       	ldi	r22, 0x01	; 1
  96:	83 e0       	ldi	r24, 0x03	; 3
  98:	0e 94 99 00 	call	0x132	; 0x132 <BUTTON_init>
	Seven_SEG_write(PORTC, 0);
  9c:	60 e0       	ldi	r22, 0x00	; 0
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	0e 94 91 00 	call	0x122	; 0x122 <Seven_SEG_write>
}
  a4:	0f 91       	pop	r16
  a6:	08 95       	ret

000000a8 <App>:

void App()
{
  a8:	cf 93       	push	r28
  aa:	df 93       	push	r29
	Seven_SEG_write(PORTC, 0);
  ac:	60 e0       	ldi	r22, 0x00	; 0
  ae:	82 e0       	ldi	r24, 0x02	; 2
  b0:	0e 94 91 00 	call	0x122	; 0x122 <Seven_SEG_write>
	delay_ms(1000);
  b4:	88 ee       	ldi	r24, 0xE8	; 232
  b6:	93 e0       	ldi	r25, 0x03	; 3
  b8:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <delay_ms>
	for (int i = 1; i < 10; i++)
  bc:	c1 e0       	ldi	r28, 0x01	; 1
  be:	d0 e0       	ldi	r29, 0x00	; 0
  c0:	0c c0       	rjmp	.+24     	; 0xda <App+0x32>
	{
		Seven_SEG_write(PORTC, i);
  c2:	6c 2f       	mov	r22, r28
  c4:	82 e0       	ldi	r24, 0x02	; 2
  c6:	0e 94 91 00 	call	0x122	; 0x122 <Seven_SEG_write>
		delay_ms(1000);
  ca:	88 ee       	ldi	r24, 0xE8	; 232
  cc:	93 e0       	ldi	r25, 0x03	; 3
  ce:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <delay_ms>
		DIO_clearPort(PORTC);
  d2:	82 e0       	ldi	r24, 0x02	; 2
  d4:	0e 94 28 01 	call	0x250	; 0x250 <DIO_clearPort>

void App()
{
	Seven_SEG_write(PORTC, 0);
	delay_ms(1000);
	for (int i = 1; i < 10; i++)
  d8:	21 96       	adiw	r28, 0x01	; 1
  da:	ca 30       	cpi	r28, 0x0A	; 10
  dc:	d1 05       	cpc	r29, r1
  de:	8c f3       	brlt	.-30     	; 0xc2 <App+0x1a>
		Seven_SEG_write(PORTC, i);
		delay_ms(1000);
		DIO_clearPort(PORTC);
}
	
  e0:	df 91       	pop	r29
  e2:	cf 91       	pop	r28
  e4:	08 95       	ret

000000e6 <Seven_SEG_init>:

#include "SEVEN_SEG.h"

// Initializing 7 seg pins as output
void Seven_SEG_init(register_t port, uint8_t pin0, uint8_t pin1, uint8_t pin2, uint8_t pin3)
{
  e6:	0f 93       	push	r16
  e8:	1f 93       	push	r17
  ea:	cf 93       	push	r28
  ec:	df 93       	push	r29
  ee:	c8 2f       	mov	r28, r24
  f0:	14 2f       	mov	r17, r20
  f2:	d2 2f       	mov	r29, r18
	DIO_setPinDir(port, pin0, output);
  f4:	41 e0       	ldi	r20, 0x01	; 1
  f6:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_setPinDir>
	DIO_setPinDir(port, pin1, output);
  fa:	41 e0       	ldi	r20, 0x01	; 1
  fc:	61 2f       	mov	r22, r17
  fe:	8c 2f       	mov	r24, r28
 100:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_setPinDir>
	DIO_setPinDir(port, pin2, output);
 104:	41 e0       	ldi	r20, 0x01	; 1
 106:	6d 2f       	mov	r22, r29
 108:	8c 2f       	mov	r24, r28
 10a:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_setPinDir>
	DIO_setPinDir(port, pin3, output);
 10e:	41 e0       	ldi	r20, 0x01	; 1
 110:	60 2f       	mov	r22, r16
 112:	8c 2f       	mov	r24, r28
 114:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_setPinDir>
}
 118:	df 91       	pop	r29
 11a:	cf 91       	pop	r28
 11c:	1f 91       	pop	r17
 11e:	0f 91       	pop	r16
 120:	08 95       	ret

00000122 <Seven_SEG_write>:

// Giving 7 seg a decimal num 0-9 to write it on
void Seven_SEG_write(register_t port, uint8_t num)
{
	if(num >= 0 && num <= 9){
 122:	6a 30       	cpi	r22, 0x0A	; 10
 124:	18 f4       	brcc	.+6      	; 0x12c <Seven_SEG_write+0xa>
		DIO_writePort(port, num);
 126:	0e 94 10 01 	call	0x220	; 0x220 <DIO_writePort>
 12a:	08 95       	ret
	}
	else{
		DIO_clearPort(port);
 12c:	0e 94 28 01 	call	0x250	; 0x250 <DIO_clearPort>
 130:	08 95       	ret

00000132 <BUTTON_init>:


#include "BUTTON.h"

void BUTTON_init(register_t port, uint8_t pinNum){
	DIO_setPinDir(port, pinNum, input);
 132:	40 e0       	ldi	r20, 0x00	; 0
 134:	0e 94 a2 00 	call	0x144	; 0x144 <DIO_setPinDir>
 138:	08 95       	ret

0000013a <main>:

int main(void)
{
	/* Replace with your application code */
	
	App_init();
 13a:	0e 94 3e 00 	call	0x7c	; 0x7c <App_init>
	
	while(1)
	{
		App();
 13e:	0e 94 54 00 	call	0xa8	; 0xa8 <App>
 142:	fd cf       	rjmp	.-6      	; 0x13e <main+0x4>

00000144 <DIO_setPinDir>:
		
		default:
		break;
	}
	return 0;
}
 144:	41 11       	cpse	r20, r1
 146:	38 c0       	rjmp	.+112    	; 0x1b8 <DIO_setPinDir+0x74>
 148:	81 30       	cpi	r24, 0x01	; 1
 14a:	91 f0       	breq	.+36     	; 0x170 <DIO_setPinDir+0x2c>
 14c:	28 f0       	brcs	.+10     	; 0x158 <DIO_setPinDir+0x14>
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	d9 f0       	breq	.+54     	; 0x188 <DIO_setPinDir+0x44>
 152:	83 30       	cpi	r24, 0x03	; 3
 154:	29 f1       	breq	.+74     	; 0x1a0 <DIO_setPinDir+0x5c>
 156:	08 95       	ret
 158:	2a b3       	in	r18, 0x1a	; 26
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	90 e0       	ldi	r25, 0x00	; 0
 15e:	02 c0       	rjmp	.+4      	; 0x164 <DIO_setPinDir+0x20>
 160:	88 0f       	add	r24, r24
 162:	99 1f       	adc	r25, r25
 164:	6a 95       	dec	r22
 166:	e2 f7       	brpl	.-8      	; 0x160 <DIO_setPinDir+0x1c>
 168:	80 95       	com	r24
 16a:	82 23       	and	r24, r18
 16c:	8a bb       	out	0x1a, r24	; 26
 16e:	08 95       	ret
 170:	27 b3       	in	r18, 0x17	; 23
 172:	81 e0       	ldi	r24, 0x01	; 1
 174:	90 e0       	ldi	r25, 0x00	; 0
 176:	02 c0       	rjmp	.+4      	; 0x17c <DIO_setPinDir+0x38>
 178:	88 0f       	add	r24, r24
 17a:	99 1f       	adc	r25, r25
 17c:	6a 95       	dec	r22
 17e:	e2 f7       	brpl	.-8      	; 0x178 <DIO_setPinDir+0x34>
 180:	80 95       	com	r24
 182:	82 23       	and	r24, r18
 184:	87 bb       	out	0x17, r24	; 23
 186:	08 95       	ret
 188:	24 b3       	in	r18, 0x14	; 20
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	90 e0       	ldi	r25, 0x00	; 0
 18e:	02 c0       	rjmp	.+4      	; 0x194 <DIO_setPinDir+0x50>
 190:	88 0f       	add	r24, r24
 192:	99 1f       	adc	r25, r25
 194:	6a 95       	dec	r22
 196:	e2 f7       	brpl	.-8      	; 0x190 <DIO_setPinDir+0x4c>
 198:	80 95       	com	r24
 19a:	82 23       	and	r24, r18
 19c:	84 bb       	out	0x14, r24	; 20
 19e:	08 95       	ret
 1a0:	21 b3       	in	r18, 0x11	; 17
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	02 c0       	rjmp	.+4      	; 0x1ac <DIO_setPinDir+0x68>
 1a8:	88 0f       	add	r24, r24
 1aa:	99 1f       	adc	r25, r25
 1ac:	6a 95       	dec	r22
 1ae:	e2 f7       	brpl	.-8      	; 0x1a8 <DIO_setPinDir+0x64>
 1b0:	80 95       	com	r24
 1b2:	82 23       	and	r24, r18
 1b4:	81 bb       	out	0x11, r24	; 17
 1b6:	08 95       	ret
 1b8:	81 30       	cpi	r24, 0x01	; 1
 1ba:	89 f0       	breq	.+34     	; 0x1de <DIO_setPinDir+0x9a>
 1bc:	28 f0       	brcs	.+10     	; 0x1c8 <DIO_setPinDir+0x84>
 1be:	82 30       	cpi	r24, 0x02	; 2
 1c0:	c9 f0       	breq	.+50     	; 0x1f4 <DIO_setPinDir+0xb0>
 1c2:	83 30       	cpi	r24, 0x03	; 3
 1c4:	11 f1       	breq	.+68     	; 0x20a <DIO_setPinDir+0xc6>
 1c6:	08 95       	ret
 1c8:	2a b3       	in	r18, 0x1a	; 26
 1ca:	81 e0       	ldi	r24, 0x01	; 1
 1cc:	90 e0       	ldi	r25, 0x00	; 0
 1ce:	02 c0       	rjmp	.+4      	; 0x1d4 <DIO_setPinDir+0x90>
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	6a 95       	dec	r22
 1d6:	e2 f7       	brpl	.-8      	; 0x1d0 <DIO_setPinDir+0x8c>
 1d8:	82 2b       	or	r24, r18
 1da:	8a bb       	out	0x1a, r24	; 26
 1dc:	08 95       	ret
 1de:	27 b3       	in	r18, 0x17	; 23
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	90 e0       	ldi	r25, 0x00	; 0
 1e4:	02 c0       	rjmp	.+4      	; 0x1ea <DIO_setPinDir+0xa6>
 1e6:	88 0f       	add	r24, r24
 1e8:	99 1f       	adc	r25, r25
 1ea:	6a 95       	dec	r22
 1ec:	e2 f7       	brpl	.-8      	; 0x1e6 <DIO_setPinDir+0xa2>
 1ee:	82 2b       	or	r24, r18
 1f0:	87 bb       	out	0x17, r24	; 23
 1f2:	08 95       	ret
 1f4:	24 b3       	in	r18, 0x14	; 20
 1f6:	81 e0       	ldi	r24, 0x01	; 1
 1f8:	90 e0       	ldi	r25, 0x00	; 0
 1fa:	02 c0       	rjmp	.+4      	; 0x200 <DIO_setPinDir+0xbc>
 1fc:	88 0f       	add	r24, r24
 1fe:	99 1f       	adc	r25, r25
 200:	6a 95       	dec	r22
 202:	e2 f7       	brpl	.-8      	; 0x1fc <DIO_setPinDir+0xb8>
 204:	82 2b       	or	r24, r18
 206:	84 bb       	out	0x14, r24	; 20
 208:	08 95       	ret
 20a:	21 b3       	in	r18, 0x11	; 17
 20c:	81 e0       	ldi	r24, 0x01	; 1
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	02 c0       	rjmp	.+4      	; 0x216 <DIO_setPinDir+0xd2>
 212:	88 0f       	add	r24, r24
 214:	99 1f       	adc	r25, r25
 216:	6a 95       	dec	r22
 218:	e2 f7       	brpl	.-8      	; 0x212 <DIO_setPinDir+0xce>
 21a:	82 2b       	or	r24, r18
 21c:	81 bb       	out	0x11, r24	; 17
 21e:	08 95       	ret

00000220 <DIO_writePort>:

void DIO_writePort(register_t port, uint8_t num)
{
	switch (port){
 220:	81 30       	cpi	r24, 0x01	; 1
 222:	51 f0       	breq	.+20     	; 0x238 <DIO_writePort+0x18>
 224:	28 f0       	brcs	.+10     	; 0x230 <DIO_writePort+0x10>
 226:	82 30       	cpi	r24, 0x02	; 2
 228:	59 f0       	breq	.+22     	; 0x240 <DIO_writePort+0x20>
 22a:	83 30       	cpi	r24, 0x03	; 3
 22c:	69 f0       	breq	.+26     	; 0x248 <DIO_writePort+0x28>
 22e:	08 95       	ret
		case PORTA:
		PORTA_DATA |= num;
 230:	8b b3       	in	r24, 0x1b	; 27
 232:	68 2b       	or	r22, r24
 234:	6b bb       	out	0x1b, r22	; 27
		break;
 236:	08 95       	ret
		
		case PORTB:
		PORTB_DATA |= num;
 238:	88 b3       	in	r24, 0x18	; 24
 23a:	68 2b       	or	r22, r24
 23c:	68 bb       	out	0x18, r22	; 24
		break;
 23e:	08 95       	ret
		
		case PORTC:
		PORTC_DATA |= num;
 240:	85 b3       	in	r24, 0x15	; 21
 242:	68 2b       	or	r22, r24
 244:	65 bb       	out	0x15, r22	; 21
		break;					
 246:	08 95       	ret
		
		case PORTD:
		PORTD_DATA |= num;
 248:	82 b3       	in	r24, 0x12	; 18
 24a:	68 2b       	or	r22, r24
 24c:	62 bb       	out	0x12, r22	; 18
 24e:	08 95       	ret

00000250 <DIO_clearPort>:
	}
}

void DIO_clearPort(register_t port)
{
	switch (port){
 250:	81 30       	cpi	r24, 0x01	; 1
 252:	41 f0       	breq	.+16     	; 0x264 <DIO_clearPort+0x14>
 254:	28 f0       	brcs	.+10     	; 0x260 <DIO_clearPort+0x10>
 256:	82 30       	cpi	r24, 0x02	; 2
 258:	39 f0       	breq	.+14     	; 0x268 <DIO_clearPort+0x18>
 25a:	83 30       	cpi	r24, 0x03	; 3
 25c:	39 f0       	breq	.+14     	; 0x26c <DIO_clearPort+0x1c>
 25e:	08 95       	ret
		case PORTA:
		PORTA_DATA = 0x00;
 260:	1b ba       	out	0x1b, r1	; 27
		break;
 262:	08 95       	ret
		
		case PORTB:
		PORTB_DATA = 0x00;
 264:	18 ba       	out	0x18, r1	; 24
		break;
 266:	08 95       	ret
		
		case PORTC:
		PORTC_DATA = 0x00;
 268:	15 ba       	out	0x15, r1	; 21
		break;
 26a:	08 95       	ret
		
		case PORTD:
		PORTD_DATA = 0x00;
 26c:	12 ba       	out	0x12, r1	; 18
 26e:	08 95       	ret

00000270 <TIMER0_init>:
void TIMER0_init()
{
	
	#if(TIMER0_SELECTOR == TIMER0_NORMAL)
	// Clearing timer
	TCNT0 = 0x00;
 270:	12 be       	out	0x32, r1	; 50
	CLEAR_BIT(TCCR0, FOC0);
 272:	83 b7       	in	r24, 0x33	; 51
 274:	8f 77       	andi	r24, 0x7F	; 127
 276:	83 bf       	out	0x33, r24	; 51
	
	// Enable Timer0 interrupt
	SET_BIT(TIMSK, TOIE0);
 278:	89 b7       	in	r24, 0x39	; 57
 27a:	81 60       	ori	r24, 0x01	; 1
 27c:	89 bf       	out	0x39, r24	; 57
 27e:	08 95       	ret

00000280 <TIMER0_start>:

void TIMER0_start()
{
	
	// Enabling clk/1024 prescaler
	SET_BIT(TCCR0, CS00);
 280:	83 b7       	in	r24, 0x33	; 51
 282:	81 60       	ori	r24, 0x01	; 1
 284:	83 bf       	out	0x33, r24	; 51
	SET_BIT(TCCR0, CS02);
 286:	83 b7       	in	r24, 0x33	; 51
 288:	84 60       	ori	r24, 0x04	; 4
 28a:	83 bf       	out	0x33, r24	; 51
 28c:	08 95       	ret

0000028e <TIMER0_stop>:
void TIMER0_stop()
{
	
	// Stoping timer0 by clearing clock source bits
	// CS_Bits == 000 ----> No clock ----> Timer not working
	CLEAR_BIT(TCCR0, CS00);
 28e:	83 b7       	in	r24, 0x33	; 51
 290:	8e 7f       	andi	r24, 0xFE	; 254
 292:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0, CS01);
 294:	83 b7       	in	r24, 0x33	; 51
 296:	8d 7f       	andi	r24, 0xFD	; 253
 298:	83 bf       	out	0x33, r24	; 51
	CLEAR_BIT(TCCR0, CS02);
 29a:	83 b7       	in	r24, 0x33	; 51
 29c:	8b 7f       	andi	r24, 0xFB	; 251
 29e:	83 bf       	out	0x33, r24	; 51
 2a0:	08 95       	ret

000002a2 <TIMER0_read>:
}

uint8_t TIMER0_read()
{
	// Reading the value of timer0
	return TCNT0;
 2a2:	82 b7       	in	r24, 0x32	; 50
}
 2a4:	08 95       	ret

000002a6 <TIMER0_readOVF>:

uint8_t TIMER0_readOVF()
{
	// Reading timer0 overflow bit (TOV0)
	return GET_BIT(TIFR, TOV0);
 2a6:	88 b7       	in	r24, 0x38	; 56
}
 2a8:	81 70       	andi	r24, 0x01	; 1
 2aa:	08 95       	ret

000002ac <TIMER0_clearOVF>:

void TIMER0_clearOVF()
{
	// Clearing timer0 overflow bit (TOV0)
	SET_BIT(TIFR, TOV0);
 2ac:	88 b7       	in	r24, 0x38	; 56
 2ae:	81 60       	ori	r24, 0x01	; 1
 2b0:	88 bf       	out	0x38, r24	; 56
 2b2:	08 95       	ret

000002b4 <delay_ms>:
		}
	}
}

void delay_ms(uint16_t timeDelay)
{
 2b4:	cf 92       	push	r12
 2b6:	df 92       	push	r13
 2b8:	ef 92       	push	r14
 2ba:	ff 92       	push	r15
 2bc:	0f 93       	push	r16
 2be:	1f 93       	push	r17
 2c0:	cf 93       	push	r28
	// Resolution = prescaler / FCPU
	// Resolution value in seconds so, multiplying it to 1000 to convert it to milliseconds would make it easier
	//float32_t resolution = (1024 / F_CPU) * 1000;
	
	// Calculating how many ticks needed
	float32_t ticksNum = timeDelay / 1.024;
 2c2:	bc 01       	movw	r22, r24
 2c4:	80 e0       	ldi	r24, 0x00	; 0
 2c6:	90 e0       	ldi	r25, 0x00	; 0
 2c8:	0e 94 b9 02 	call	0x572	; 0x572 <__floatunsisf>
 2cc:	2f e6       	ldi	r18, 0x6F	; 111
 2ce:	32 e1       	ldi	r19, 0x12	; 18
 2d0:	43 e8       	ldi	r20, 0x83	; 131
 2d2:	5f e3       	ldi	r21, 0x3F	; 63
 2d4:	0e 94 18 02 	call	0x430	; 0x430 <__divsf3>
 2d8:	6b 01       	movw	r12, r22
 2da:	7c 01       	movw	r14, r24
	
	// Calculating how many overflows needed
	overflowCounter = ticksNum / 256;
 2dc:	20 e0       	ldi	r18, 0x00	; 0
 2de:	30 e0       	ldi	r19, 0x00	; 0
 2e0:	40 e8       	ldi	r20, 0x80	; 128
 2e2:	5b e3       	ldi	r21, 0x3B	; 59
 2e4:	0e 94 47 03 	call	0x68e	; 0x68e <__mulsf3>
 2e8:	0e 94 8a 02 	call	0x514	; 0x514 <__fixunssfsi>
 2ec:	60 93 60 00 	sts	0x0060, r22	; 0x800060 <__DATA_REGION_ORIGIN__>
	
	// Calculating how many ticks remained after the last overflow
	uint16_t remainedTicks = ticksNum - (overflowCounter * 256);
 2f0:	70 e0       	ldi	r23, 0x00	; 0
 2f2:	76 2f       	mov	r23, r22
 2f4:	66 27       	eor	r22, r22
 2f6:	07 2e       	mov	r0, r23
 2f8:	00 0c       	add	r0, r0
 2fa:	88 0b       	sbc	r24, r24
 2fc:	99 0b       	sbc	r25, r25
 2fe:	0e 94 bb 02 	call	0x576	; 0x576 <__floatsisf>
 302:	9b 01       	movw	r18, r22
 304:	ac 01       	movw	r20, r24
 306:	c7 01       	movw	r24, r14
 308:	b6 01       	movw	r22, r12
 30a:	0e 94 ab 01 	call	0x356	; 0x356 <__subsf3>
 30e:	0e 94 8a 02 	call	0x514	; 0x514 <__fixunssfsi>
 312:	8b 01       	movw	r16, r22
	
	TIMER0_init();
 314:	0e 94 38 01 	call	0x270	; 0x270 <TIMER0_init>
	TIMER0_start();
 318:	0e 94 40 01 	call	0x280	; 0x280 <TIMER0_start>
	
	for (uint8_t iterator = 0; iterator < overflowCounter; iterator++)
 31c:	c0 e0       	ldi	r28, 0x00	; 0
 31e:	07 c0       	rjmp	.+14     	; 0x32e <delay_ms+0x7a>
	{
		// Stick on the loop until the overflow flag becomes 1 then clear it
		// Repeat it with the same count of overflow counter
		while(TIMER0_readOVF() == 0);
 320:	0e 94 53 01 	call	0x2a6	; 0x2a6 <TIMER0_readOVF>
 324:	88 23       	and	r24, r24
 326:	e1 f3       	breq	.-8      	; 0x320 <delay_ms+0x6c>
		TIMER0_clearOVF();
 328:	0e 94 56 01 	call	0x2ac	; 0x2ac <TIMER0_clearOVF>
	uint16_t remainedTicks = ticksNum - (overflowCounter * 256);
	
	TIMER0_init();
	TIMER0_start();
	
	for (uint8_t iterator = 0; iterator < overflowCounter; iterator++)
 32c:	cf 5f       	subi	r28, 0xFF	; 255
 32e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 332:	c8 17       	cp	r28, r24
 334:	a8 f3       	brcs	.-22     	; 0x320 <delay_ms+0x6c>
	}
	
	// Stay on the loop until it finishes the remained ticks
	while(1)
	{
		if(TIMER0_read() == remainedTicks){
 336:	0e 94 51 01 	call	0x2a2	; 0x2a2 <TIMER0_read>
 33a:	90 e0       	ldi	r25, 0x00	; 0
 33c:	08 17       	cp	r16, r24
 33e:	19 07       	cpc	r17, r25
 340:	d1 f7       	brne	.-12     	; 0x336 <delay_ms+0x82>
			TIMER0_stop();
 342:	0e 94 47 01 	call	0x28e	; 0x28e <TIMER0_stop>
			break;
		}
	}
 346:	cf 91       	pop	r28
 348:	1f 91       	pop	r17
 34a:	0f 91       	pop	r16
 34c:	ff 90       	pop	r15
 34e:	ef 90       	pop	r14
 350:	df 90       	pop	r13
 352:	cf 90       	pop	r12
 354:	08 95       	ret

00000356 <__subsf3>:
 356:	50 58       	subi	r21, 0x80	; 128

00000358 <__addsf3>:
 358:	bb 27       	eor	r27, r27
 35a:	aa 27       	eor	r26, r26
 35c:	0e 94 c3 01 	call	0x386	; 0x386 <__addsf3x>
 360:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 364:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 368:	38 f0       	brcs	.+14     	; 0x378 <__addsf3+0x20>
 36a:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 36e:	20 f0       	brcs	.+8      	; 0x378 <__addsf3+0x20>
 370:	39 f4       	brne	.+14     	; 0x380 <__addsf3+0x28>
 372:	9f 3f       	cpi	r25, 0xFF	; 255
 374:	19 f4       	brne	.+6      	; 0x37c <__addsf3+0x24>
 376:	26 f4       	brtc	.+8      	; 0x380 <__addsf3+0x28>
 378:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>
 37c:	0e f4       	brtc	.+2      	; 0x380 <__addsf3+0x28>
 37e:	e0 95       	com	r30
 380:	e7 fb       	bst	r30, 7
 382:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>

00000386 <__addsf3x>:
 386:	e9 2f       	mov	r30, r25
 388:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 38c:	58 f3       	brcs	.-42     	; 0x364 <__addsf3+0xc>
 38e:	ba 17       	cp	r27, r26
 390:	62 07       	cpc	r22, r18
 392:	73 07       	cpc	r23, r19
 394:	84 07       	cpc	r24, r20
 396:	95 07       	cpc	r25, r21
 398:	20 f0       	brcs	.+8      	; 0x3a2 <__addsf3x+0x1c>
 39a:	79 f4       	brne	.+30     	; 0x3ba <__addsf3x+0x34>
 39c:	a6 f5       	brtc	.+104    	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 39e:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_zero>
 3a2:	0e f4       	brtc	.+2      	; 0x3a6 <__addsf3x+0x20>
 3a4:	e0 95       	com	r30
 3a6:	0b 2e       	mov	r0, r27
 3a8:	ba 2f       	mov	r27, r26
 3aa:	a0 2d       	mov	r26, r0
 3ac:	0b 01       	movw	r0, r22
 3ae:	b9 01       	movw	r22, r18
 3b0:	90 01       	movw	r18, r0
 3b2:	0c 01       	movw	r0, r24
 3b4:	ca 01       	movw	r24, r20
 3b6:	a0 01       	movw	r20, r0
 3b8:	11 24       	eor	r1, r1
 3ba:	ff 27       	eor	r31, r31
 3bc:	59 1b       	sub	r21, r25
 3be:	99 f0       	breq	.+38     	; 0x3e6 <__addsf3x+0x60>
 3c0:	59 3f       	cpi	r21, 0xF9	; 249
 3c2:	50 f4       	brcc	.+20     	; 0x3d8 <__addsf3x+0x52>
 3c4:	50 3e       	cpi	r21, 0xE0	; 224
 3c6:	68 f1       	brcs	.+90     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3c8:	1a 16       	cp	r1, r26
 3ca:	f0 40       	sbci	r31, 0x00	; 0
 3cc:	a2 2f       	mov	r26, r18
 3ce:	23 2f       	mov	r18, r19
 3d0:	34 2f       	mov	r19, r20
 3d2:	44 27       	eor	r20, r20
 3d4:	58 5f       	subi	r21, 0xF8	; 248
 3d6:	f3 cf       	rjmp	.-26     	; 0x3be <__addsf3x+0x38>
 3d8:	46 95       	lsr	r20
 3da:	37 95       	ror	r19
 3dc:	27 95       	ror	r18
 3de:	a7 95       	ror	r26
 3e0:	f0 40       	sbci	r31, 0x00	; 0
 3e2:	53 95       	inc	r21
 3e4:	c9 f7       	brne	.-14     	; 0x3d8 <__addsf3x+0x52>
 3e6:	7e f4       	brtc	.+30     	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 3e8:	1f 16       	cp	r1, r31
 3ea:	ba 0b       	sbc	r27, r26
 3ec:	62 0b       	sbc	r22, r18
 3ee:	73 0b       	sbc	r23, r19
 3f0:	84 0b       	sbc	r24, r20
 3f2:	ba f0       	brmi	.+46     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 3f4:	91 50       	subi	r25, 0x01	; 1
 3f6:	a1 f0       	breq	.+40     	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 3f8:	ff 0f       	add	r31, r31
 3fa:	bb 1f       	adc	r27, r27
 3fc:	66 1f       	adc	r22, r22
 3fe:	77 1f       	adc	r23, r23
 400:	88 1f       	adc	r24, r24
 402:	c2 f7       	brpl	.-16     	; 0x3f4 <__addsf3x+0x6e>
 404:	0e c0       	rjmp	.+28     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 406:	ba 0f       	add	r27, r26
 408:	62 1f       	adc	r22, r18
 40a:	73 1f       	adc	r23, r19
 40c:	84 1f       	adc	r24, r20
 40e:	48 f4       	brcc	.+18     	; 0x422 <__EEPROM_REGION_LENGTH__+0x22>
 410:	87 95       	ror	r24
 412:	77 95       	ror	r23
 414:	67 95       	ror	r22
 416:	b7 95       	ror	r27
 418:	f7 95       	ror	r31
 41a:	9e 3f       	cpi	r25, 0xFE	; 254
 41c:	08 f0       	brcs	.+2      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 41e:	b0 cf       	rjmp	.-160    	; 0x380 <__addsf3+0x28>
 420:	93 95       	inc	r25
 422:	88 0f       	add	r24, r24
 424:	08 f0       	brcs	.+2      	; 0x428 <__EEPROM_REGION_LENGTH__+0x28>
 426:	99 27       	eor	r25, r25
 428:	ee 0f       	add	r30, r30
 42a:	97 95       	ror	r25
 42c:	87 95       	ror	r24
 42e:	08 95       	ret

00000430 <__divsf3>:
 430:	0e 94 2c 02 	call	0x458	; 0x458 <__divsf3x>
 434:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 438:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 43c:	58 f0       	brcs	.+22     	; 0x454 <__divsf3+0x24>
 43e:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 442:	40 f0       	brcs	.+16     	; 0x454 <__divsf3+0x24>
 444:	29 f4       	brne	.+10     	; 0x450 <__divsf3+0x20>
 446:	5f 3f       	cpi	r21, 0xFF	; 255
 448:	29 f0       	breq	.+10     	; 0x454 <__divsf3+0x24>
 44a:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 44e:	51 11       	cpse	r21, r1
 450:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 454:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>

00000458 <__divsf3x>:
 458:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 45c:	68 f3       	brcs	.-38     	; 0x438 <__divsf3+0x8>

0000045e <__divsf3_pse>:
 45e:	99 23       	and	r25, r25
 460:	b1 f3       	breq	.-20     	; 0x44e <__divsf3+0x1e>
 462:	55 23       	and	r21, r21
 464:	91 f3       	breq	.-28     	; 0x44a <__divsf3+0x1a>
 466:	95 1b       	sub	r25, r21
 468:	55 0b       	sbc	r21, r21
 46a:	bb 27       	eor	r27, r27
 46c:	aa 27       	eor	r26, r26
 46e:	62 17       	cp	r22, r18
 470:	73 07       	cpc	r23, r19
 472:	84 07       	cpc	r24, r20
 474:	38 f0       	brcs	.+14     	; 0x484 <__divsf3_pse+0x26>
 476:	9f 5f       	subi	r25, 0xFF	; 255
 478:	5f 4f       	sbci	r21, 0xFF	; 255
 47a:	22 0f       	add	r18, r18
 47c:	33 1f       	adc	r19, r19
 47e:	44 1f       	adc	r20, r20
 480:	aa 1f       	adc	r26, r26
 482:	a9 f3       	breq	.-22     	; 0x46e <__divsf3_pse+0x10>
 484:	35 d0       	rcall	.+106    	; 0x4f0 <__divsf3_pse+0x92>
 486:	0e 2e       	mov	r0, r30
 488:	3a f0       	brmi	.+14     	; 0x498 <__divsf3_pse+0x3a>
 48a:	e0 e8       	ldi	r30, 0x80	; 128
 48c:	32 d0       	rcall	.+100    	; 0x4f2 <__divsf3_pse+0x94>
 48e:	91 50       	subi	r25, 0x01	; 1
 490:	50 40       	sbci	r21, 0x00	; 0
 492:	e6 95       	lsr	r30
 494:	00 1c       	adc	r0, r0
 496:	ca f7       	brpl	.-14     	; 0x48a <__divsf3_pse+0x2c>
 498:	2b d0       	rcall	.+86     	; 0x4f0 <__divsf3_pse+0x92>
 49a:	fe 2f       	mov	r31, r30
 49c:	29 d0       	rcall	.+82     	; 0x4f0 <__divsf3_pse+0x92>
 49e:	66 0f       	add	r22, r22
 4a0:	77 1f       	adc	r23, r23
 4a2:	88 1f       	adc	r24, r24
 4a4:	bb 1f       	adc	r27, r27
 4a6:	26 17       	cp	r18, r22
 4a8:	37 07       	cpc	r19, r23
 4aa:	48 07       	cpc	r20, r24
 4ac:	ab 07       	cpc	r26, r27
 4ae:	b0 e8       	ldi	r27, 0x80	; 128
 4b0:	09 f0       	breq	.+2      	; 0x4b4 <__divsf3_pse+0x56>
 4b2:	bb 0b       	sbc	r27, r27
 4b4:	80 2d       	mov	r24, r0
 4b6:	bf 01       	movw	r22, r30
 4b8:	ff 27       	eor	r31, r31
 4ba:	93 58       	subi	r25, 0x83	; 131
 4bc:	5f 4f       	sbci	r21, 0xFF	; 255
 4be:	3a f0       	brmi	.+14     	; 0x4ce <__divsf3_pse+0x70>
 4c0:	9e 3f       	cpi	r25, 0xFE	; 254
 4c2:	51 05       	cpc	r21, r1
 4c4:	78 f0       	brcs	.+30     	; 0x4e4 <__divsf3_pse+0x86>
 4c6:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 4ca:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 4ce:	5f 3f       	cpi	r21, 0xFF	; 255
 4d0:	e4 f3       	brlt	.-8      	; 0x4ca <__divsf3_pse+0x6c>
 4d2:	98 3e       	cpi	r25, 0xE8	; 232
 4d4:	d4 f3       	brlt	.-12     	; 0x4ca <__divsf3_pse+0x6c>
 4d6:	86 95       	lsr	r24
 4d8:	77 95       	ror	r23
 4da:	67 95       	ror	r22
 4dc:	b7 95       	ror	r27
 4de:	f7 95       	ror	r31
 4e0:	9f 5f       	subi	r25, 0xFF	; 255
 4e2:	c9 f7       	brne	.-14     	; 0x4d6 <__divsf3_pse+0x78>
 4e4:	88 0f       	add	r24, r24
 4e6:	91 1d       	adc	r25, r1
 4e8:	96 95       	lsr	r25
 4ea:	87 95       	ror	r24
 4ec:	97 f9       	bld	r25, 7
 4ee:	08 95       	ret
 4f0:	e1 e0       	ldi	r30, 0x01	; 1
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	88 1f       	adc	r24, r24
 4f8:	bb 1f       	adc	r27, r27
 4fa:	62 17       	cp	r22, r18
 4fc:	73 07       	cpc	r23, r19
 4fe:	84 07       	cpc	r24, r20
 500:	ba 07       	cpc	r27, r26
 502:	20 f0       	brcs	.+8      	; 0x50c <__divsf3_pse+0xae>
 504:	62 1b       	sub	r22, r18
 506:	73 0b       	sbc	r23, r19
 508:	84 0b       	sbc	r24, r20
 50a:	ba 0b       	sbc	r27, r26
 50c:	ee 1f       	adc	r30, r30
 50e:	88 f7       	brcc	.-30     	; 0x4f2 <__divsf3_pse+0x94>
 510:	e0 95       	com	r30
 512:	08 95       	ret

00000514 <__fixunssfsi>:
 514:	0e 94 26 03 	call	0x64c	; 0x64c <__fp_splitA>
 518:	88 f0       	brcs	.+34     	; 0x53c <__fixunssfsi+0x28>
 51a:	9f 57       	subi	r25, 0x7F	; 127
 51c:	98 f0       	brcs	.+38     	; 0x544 <__fixunssfsi+0x30>
 51e:	b9 2f       	mov	r27, r25
 520:	99 27       	eor	r25, r25
 522:	b7 51       	subi	r27, 0x17	; 23
 524:	b0 f0       	brcs	.+44     	; 0x552 <__fixunssfsi+0x3e>
 526:	e1 f0       	breq	.+56     	; 0x560 <__fixunssfsi+0x4c>
 528:	66 0f       	add	r22, r22
 52a:	77 1f       	adc	r23, r23
 52c:	88 1f       	adc	r24, r24
 52e:	99 1f       	adc	r25, r25
 530:	1a f0       	brmi	.+6      	; 0x538 <__fixunssfsi+0x24>
 532:	ba 95       	dec	r27
 534:	c9 f7       	brne	.-14     	; 0x528 <__fixunssfsi+0x14>
 536:	14 c0       	rjmp	.+40     	; 0x560 <__fixunssfsi+0x4c>
 538:	b1 30       	cpi	r27, 0x01	; 1
 53a:	91 f0       	breq	.+36     	; 0x560 <__fixunssfsi+0x4c>
 53c:	0e 94 40 03 	call	0x680	; 0x680 <__fp_zero>
 540:	b1 e0       	ldi	r27, 0x01	; 1
 542:	08 95       	ret
 544:	0c 94 40 03 	jmp	0x680	; 0x680 <__fp_zero>
 548:	67 2f       	mov	r22, r23
 54a:	78 2f       	mov	r23, r24
 54c:	88 27       	eor	r24, r24
 54e:	b8 5f       	subi	r27, 0xF8	; 248
 550:	39 f0       	breq	.+14     	; 0x560 <__fixunssfsi+0x4c>
 552:	b9 3f       	cpi	r27, 0xF9	; 249
 554:	cc f3       	brlt	.-14     	; 0x548 <__fixunssfsi+0x34>
 556:	86 95       	lsr	r24
 558:	77 95       	ror	r23
 55a:	67 95       	ror	r22
 55c:	b3 95       	inc	r27
 55e:	d9 f7       	brne	.-10     	; 0x556 <__fixunssfsi+0x42>
 560:	3e f4       	brtc	.+14     	; 0x570 <__fixunssfsi+0x5c>
 562:	90 95       	com	r25
 564:	80 95       	com	r24
 566:	70 95       	com	r23
 568:	61 95       	neg	r22
 56a:	7f 4f       	sbci	r23, 0xFF	; 255
 56c:	8f 4f       	sbci	r24, 0xFF	; 255
 56e:	9f 4f       	sbci	r25, 0xFF	; 255
 570:	08 95       	ret

00000572 <__floatunsisf>:
 572:	e8 94       	clt
 574:	09 c0       	rjmp	.+18     	; 0x588 <__floatsisf+0x12>

00000576 <__floatsisf>:
 576:	97 fb       	bst	r25, 7
 578:	3e f4       	brtc	.+14     	; 0x588 <__floatsisf+0x12>
 57a:	90 95       	com	r25
 57c:	80 95       	com	r24
 57e:	70 95       	com	r23
 580:	61 95       	neg	r22
 582:	7f 4f       	sbci	r23, 0xFF	; 255
 584:	8f 4f       	sbci	r24, 0xFF	; 255
 586:	9f 4f       	sbci	r25, 0xFF	; 255
 588:	99 23       	and	r25, r25
 58a:	a9 f0       	breq	.+42     	; 0x5b6 <__floatsisf+0x40>
 58c:	f9 2f       	mov	r31, r25
 58e:	96 e9       	ldi	r25, 0x96	; 150
 590:	bb 27       	eor	r27, r27
 592:	93 95       	inc	r25
 594:	f6 95       	lsr	r31
 596:	87 95       	ror	r24
 598:	77 95       	ror	r23
 59a:	67 95       	ror	r22
 59c:	b7 95       	ror	r27
 59e:	f1 11       	cpse	r31, r1
 5a0:	f8 cf       	rjmp	.-16     	; 0x592 <__floatsisf+0x1c>
 5a2:	fa f4       	brpl	.+62     	; 0x5e2 <__floatsisf+0x6c>
 5a4:	bb 0f       	add	r27, r27
 5a6:	11 f4       	brne	.+4      	; 0x5ac <__floatsisf+0x36>
 5a8:	60 ff       	sbrs	r22, 0
 5aa:	1b c0       	rjmp	.+54     	; 0x5e2 <__floatsisf+0x6c>
 5ac:	6f 5f       	subi	r22, 0xFF	; 255
 5ae:	7f 4f       	sbci	r23, 0xFF	; 255
 5b0:	8f 4f       	sbci	r24, 0xFF	; 255
 5b2:	9f 4f       	sbci	r25, 0xFF	; 255
 5b4:	16 c0       	rjmp	.+44     	; 0x5e2 <__floatsisf+0x6c>
 5b6:	88 23       	and	r24, r24
 5b8:	11 f0       	breq	.+4      	; 0x5be <__floatsisf+0x48>
 5ba:	96 e9       	ldi	r25, 0x96	; 150
 5bc:	11 c0       	rjmp	.+34     	; 0x5e0 <__floatsisf+0x6a>
 5be:	77 23       	and	r23, r23
 5c0:	21 f0       	breq	.+8      	; 0x5ca <__floatsisf+0x54>
 5c2:	9e e8       	ldi	r25, 0x8E	; 142
 5c4:	87 2f       	mov	r24, r23
 5c6:	76 2f       	mov	r23, r22
 5c8:	05 c0       	rjmp	.+10     	; 0x5d4 <__floatsisf+0x5e>
 5ca:	66 23       	and	r22, r22
 5cc:	71 f0       	breq	.+28     	; 0x5ea <__floatsisf+0x74>
 5ce:	96 e8       	ldi	r25, 0x86	; 134
 5d0:	86 2f       	mov	r24, r22
 5d2:	70 e0       	ldi	r23, 0x00	; 0
 5d4:	60 e0       	ldi	r22, 0x00	; 0
 5d6:	2a f0       	brmi	.+10     	; 0x5e2 <__floatsisf+0x6c>
 5d8:	9a 95       	dec	r25
 5da:	66 0f       	add	r22, r22
 5dc:	77 1f       	adc	r23, r23
 5de:	88 1f       	adc	r24, r24
 5e0:	da f7       	brpl	.-10     	; 0x5d8 <__floatsisf+0x62>
 5e2:	88 0f       	add	r24, r24
 5e4:	96 95       	lsr	r25
 5e6:	87 95       	ror	r24
 5e8:	97 f9       	bld	r25, 7
 5ea:	08 95       	ret

000005ec <__fp_inf>:
 5ec:	97 f9       	bld	r25, 7
 5ee:	9f 67       	ori	r25, 0x7F	; 127
 5f0:	80 e8       	ldi	r24, 0x80	; 128
 5f2:	70 e0       	ldi	r23, 0x00	; 0
 5f4:	60 e0       	ldi	r22, 0x00	; 0
 5f6:	08 95       	ret

000005f8 <__fp_nan>:
 5f8:	9f ef       	ldi	r25, 0xFF	; 255
 5fa:	80 ec       	ldi	r24, 0xC0	; 192
 5fc:	08 95       	ret

000005fe <__fp_pscA>:
 5fe:	00 24       	eor	r0, r0
 600:	0a 94       	dec	r0
 602:	16 16       	cp	r1, r22
 604:	17 06       	cpc	r1, r23
 606:	18 06       	cpc	r1, r24
 608:	09 06       	cpc	r0, r25
 60a:	08 95       	ret

0000060c <__fp_pscB>:
 60c:	00 24       	eor	r0, r0
 60e:	0a 94       	dec	r0
 610:	12 16       	cp	r1, r18
 612:	13 06       	cpc	r1, r19
 614:	14 06       	cpc	r1, r20
 616:	05 06       	cpc	r0, r21
 618:	08 95       	ret

0000061a <__fp_round>:
 61a:	09 2e       	mov	r0, r25
 61c:	03 94       	inc	r0
 61e:	00 0c       	add	r0, r0
 620:	11 f4       	brne	.+4      	; 0x626 <__fp_round+0xc>
 622:	88 23       	and	r24, r24
 624:	52 f0       	brmi	.+20     	; 0x63a <__fp_round+0x20>
 626:	bb 0f       	add	r27, r27
 628:	40 f4       	brcc	.+16     	; 0x63a <__fp_round+0x20>
 62a:	bf 2b       	or	r27, r31
 62c:	11 f4       	brne	.+4      	; 0x632 <__fp_round+0x18>
 62e:	60 ff       	sbrs	r22, 0
 630:	04 c0       	rjmp	.+8      	; 0x63a <__fp_round+0x20>
 632:	6f 5f       	subi	r22, 0xFF	; 255
 634:	7f 4f       	sbci	r23, 0xFF	; 255
 636:	8f 4f       	sbci	r24, 0xFF	; 255
 638:	9f 4f       	sbci	r25, 0xFF	; 255
 63a:	08 95       	ret

0000063c <__fp_split3>:
 63c:	57 fd       	sbrc	r21, 7
 63e:	90 58       	subi	r25, 0x80	; 128
 640:	44 0f       	add	r20, r20
 642:	55 1f       	adc	r21, r21
 644:	59 f0       	breq	.+22     	; 0x65c <__fp_splitA+0x10>
 646:	5f 3f       	cpi	r21, 0xFF	; 255
 648:	71 f0       	breq	.+28     	; 0x666 <__fp_splitA+0x1a>
 64a:	47 95       	ror	r20

0000064c <__fp_splitA>:
 64c:	88 0f       	add	r24, r24
 64e:	97 fb       	bst	r25, 7
 650:	99 1f       	adc	r25, r25
 652:	61 f0       	breq	.+24     	; 0x66c <__fp_splitA+0x20>
 654:	9f 3f       	cpi	r25, 0xFF	; 255
 656:	79 f0       	breq	.+30     	; 0x676 <__fp_splitA+0x2a>
 658:	87 95       	ror	r24
 65a:	08 95       	ret
 65c:	12 16       	cp	r1, r18
 65e:	13 06       	cpc	r1, r19
 660:	14 06       	cpc	r1, r20
 662:	55 1f       	adc	r21, r21
 664:	f2 cf       	rjmp	.-28     	; 0x64a <__fp_split3+0xe>
 666:	46 95       	lsr	r20
 668:	f1 df       	rcall	.-30     	; 0x64c <__fp_splitA>
 66a:	08 c0       	rjmp	.+16     	; 0x67c <__fp_splitA+0x30>
 66c:	16 16       	cp	r1, r22
 66e:	17 06       	cpc	r1, r23
 670:	18 06       	cpc	r1, r24
 672:	99 1f       	adc	r25, r25
 674:	f1 cf       	rjmp	.-30     	; 0x658 <__fp_splitA+0xc>
 676:	86 95       	lsr	r24
 678:	71 05       	cpc	r23, r1
 67a:	61 05       	cpc	r22, r1
 67c:	08 94       	sec
 67e:	08 95       	ret

00000680 <__fp_zero>:
 680:	e8 94       	clt

00000682 <__fp_szero>:
 682:	bb 27       	eor	r27, r27
 684:	66 27       	eor	r22, r22
 686:	77 27       	eor	r23, r23
 688:	cb 01       	movw	r24, r22
 68a:	97 f9       	bld	r25, 7
 68c:	08 95       	ret

0000068e <__mulsf3>:
 68e:	0e 94 5a 03 	call	0x6b4	; 0x6b4 <__mulsf3x>
 692:	0c 94 0d 03 	jmp	0x61a	; 0x61a <__fp_round>
 696:	0e 94 ff 02 	call	0x5fe	; 0x5fe <__fp_pscA>
 69a:	38 f0       	brcs	.+14     	; 0x6aa <__mulsf3+0x1c>
 69c:	0e 94 06 03 	call	0x60c	; 0x60c <__fp_pscB>
 6a0:	20 f0       	brcs	.+8      	; 0x6aa <__mulsf3+0x1c>
 6a2:	95 23       	and	r25, r21
 6a4:	11 f0       	breq	.+4      	; 0x6aa <__mulsf3+0x1c>
 6a6:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 6aa:	0c 94 fc 02 	jmp	0x5f8	; 0x5f8 <__fp_nan>
 6ae:	11 24       	eor	r1, r1
 6b0:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>

000006b4 <__mulsf3x>:
 6b4:	0e 94 1e 03 	call	0x63c	; 0x63c <__fp_split3>
 6b8:	70 f3       	brcs	.-36     	; 0x696 <__mulsf3+0x8>

000006ba <__mulsf3_pse>:
 6ba:	95 9f       	mul	r25, r21
 6bc:	c1 f3       	breq	.-16     	; 0x6ae <__mulsf3+0x20>
 6be:	95 0f       	add	r25, r21
 6c0:	50 e0       	ldi	r21, 0x00	; 0
 6c2:	55 1f       	adc	r21, r21
 6c4:	62 9f       	mul	r22, r18
 6c6:	f0 01       	movw	r30, r0
 6c8:	72 9f       	mul	r23, r18
 6ca:	bb 27       	eor	r27, r27
 6cc:	f0 0d       	add	r31, r0
 6ce:	b1 1d       	adc	r27, r1
 6d0:	63 9f       	mul	r22, r19
 6d2:	aa 27       	eor	r26, r26
 6d4:	f0 0d       	add	r31, r0
 6d6:	b1 1d       	adc	r27, r1
 6d8:	aa 1f       	adc	r26, r26
 6da:	64 9f       	mul	r22, r20
 6dc:	66 27       	eor	r22, r22
 6de:	b0 0d       	add	r27, r0
 6e0:	a1 1d       	adc	r26, r1
 6e2:	66 1f       	adc	r22, r22
 6e4:	82 9f       	mul	r24, r18
 6e6:	22 27       	eor	r18, r18
 6e8:	b0 0d       	add	r27, r0
 6ea:	a1 1d       	adc	r26, r1
 6ec:	62 1f       	adc	r22, r18
 6ee:	73 9f       	mul	r23, r19
 6f0:	b0 0d       	add	r27, r0
 6f2:	a1 1d       	adc	r26, r1
 6f4:	62 1f       	adc	r22, r18
 6f6:	83 9f       	mul	r24, r19
 6f8:	a0 0d       	add	r26, r0
 6fa:	61 1d       	adc	r22, r1
 6fc:	22 1f       	adc	r18, r18
 6fe:	74 9f       	mul	r23, r20
 700:	33 27       	eor	r19, r19
 702:	a0 0d       	add	r26, r0
 704:	61 1d       	adc	r22, r1
 706:	23 1f       	adc	r18, r19
 708:	84 9f       	mul	r24, r20
 70a:	60 0d       	add	r22, r0
 70c:	21 1d       	adc	r18, r1
 70e:	82 2f       	mov	r24, r18
 710:	76 2f       	mov	r23, r22
 712:	6a 2f       	mov	r22, r26
 714:	11 24       	eor	r1, r1
 716:	9f 57       	subi	r25, 0x7F	; 127
 718:	50 40       	sbci	r21, 0x00	; 0
 71a:	9a f0       	brmi	.+38     	; 0x742 <__mulsf3_pse+0x88>
 71c:	f1 f0       	breq	.+60     	; 0x75a <__mulsf3_pse+0xa0>
 71e:	88 23       	and	r24, r24
 720:	4a f0       	brmi	.+18     	; 0x734 <__mulsf3_pse+0x7a>
 722:	ee 0f       	add	r30, r30
 724:	ff 1f       	adc	r31, r31
 726:	bb 1f       	adc	r27, r27
 728:	66 1f       	adc	r22, r22
 72a:	77 1f       	adc	r23, r23
 72c:	88 1f       	adc	r24, r24
 72e:	91 50       	subi	r25, 0x01	; 1
 730:	50 40       	sbci	r21, 0x00	; 0
 732:	a9 f7       	brne	.-22     	; 0x71e <__mulsf3_pse+0x64>
 734:	9e 3f       	cpi	r25, 0xFE	; 254
 736:	51 05       	cpc	r21, r1
 738:	80 f0       	brcs	.+32     	; 0x75a <__mulsf3_pse+0xa0>
 73a:	0c 94 f6 02 	jmp	0x5ec	; 0x5ec <__fp_inf>
 73e:	0c 94 41 03 	jmp	0x682	; 0x682 <__fp_szero>
 742:	5f 3f       	cpi	r21, 0xFF	; 255
 744:	e4 f3       	brlt	.-8      	; 0x73e <__mulsf3_pse+0x84>
 746:	98 3e       	cpi	r25, 0xE8	; 232
 748:	d4 f3       	brlt	.-12     	; 0x73e <__mulsf3_pse+0x84>
 74a:	86 95       	lsr	r24
 74c:	77 95       	ror	r23
 74e:	67 95       	ror	r22
 750:	b7 95       	ror	r27
 752:	f7 95       	ror	r31
 754:	e7 95       	ror	r30
 756:	9f 5f       	subi	r25, 0xFF	; 255
 758:	c1 f7       	brne	.-16     	; 0x74a <__mulsf3_pse+0x90>
 75a:	fe 2b       	or	r31, r30
 75c:	88 0f       	add	r24, r24
 75e:	91 1d       	adc	r25, r1
 760:	96 95       	lsr	r25
 762:	87 95       	ror	r24
 764:	97 f9       	bld	r25, 7
 766:	08 95       	ret

00000768 <_exit>:
 768:	f8 94       	cli

0000076a <__stop_program>:
 76a:	ff cf       	rjmp	.-2      	; 0x76a <__stop_program>
